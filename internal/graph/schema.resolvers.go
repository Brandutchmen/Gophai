package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"app/internal/database"
	"app/internal/graph/model"
	"app/internal/repository/impl"
	"context"
	"fmt"
)

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.NewAuthor) (*model.Author, error) {
	repo := impl.NewAuthorRepositoryImpl(database.Conn)

	var bio string

	if input.Bio != nil {
		bio = *input.Bio
	}

	author := model.Author{
		Name: input.Name,
		Bio:  &bio,
	}

	createdAuthor, err := repo.Insert(ctx, author)
	if err != nil {
		return nil, err
	}
	authorModel := model.Author{
		ID:   string(createdAuthor.ID),
		Name: createdAuthor.Name,
		Bio:  createdAuthor.Bio,
	}

	if createdAuthor.Bio != nil {
		authorModel.Bio = createdAuthor.Bio
	}

	return &authorModel, nil
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, id string, input model.EditAuthor) (*model.Author, error) {
	panic(fmt.Errorf("not implemented: UpdateAuthor - updateAuthor"))
}

// DeleteAuthor is the resolver for the deleteAuthor field.
func (r *mutationResolver) DeleteAuthor(ctx context.Context, id string) (*model.Author, error) {
	panic(fmt.Errorf("not implemented: DeleteAuthor - deleteAuthor"))
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*model.Author, error) {
	panic(fmt.Errorf("not implemented: Authors - authors"))
	// q := database.New(database.Conn)

	// authors, err := q.ListAuthors(ctx)
	// if err != nil {
	// 	return nil, err
	// }

	// var authorsModel []*model.Author

	// for _, author := range authors {
	// 	authorsModel = append(authorsModel, &model.Author{
	// 		ID:   string(author.ID),
	// 		Name: author.Name,
	// 		Bio:  &author.Bio.String,
	// 	})
	// }

	// return authorsModel, nil
}

// Author is the resolver for the author field.
func (r *queryResolver) Author(ctx context.Context, id string) (*model.Author, error) {
	panic(fmt.Errorf("not implemented: Author - author"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
